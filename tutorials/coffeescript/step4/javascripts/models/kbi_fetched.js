// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  kbi.FetchedModel = (function(_super) {

    __extends(FetchedModel, _super);

    function FetchedModel() {
      return FetchedModel.__super__.constructor.apply(this, arguments);
    }

    FetchedModel.prototype.parse = function(response) {
      var attributes, collection, key, model, value;
      attributes = {};
      for (key in response) {
        value = response[key];
        if (_.isObject(value)) {
          model = new kbi.FetchedModel();
          attributes[key] = model.set(model.parse(value));
        } else if (_.isArray(value)) {
          collection = new kbi.FetchedCollection();
          attributes[key] = collection.reset(collection.parse(value));
        } else {
          attributes[key] = value;
        }
      }
      return attributes;
    };

    return FetchedModel;

  })(Backbone.Model);

  kbi.FetchedCollection = (function(_super) {

    __extends(FetchedCollection, _super);

    function FetchedCollection() {
      return FetchedCollection.__super__.constructor.apply(this, arguments);
    }

    FetchedCollection.prototype.model = kbi.FetchedModel;

    FetchedCollection.prototype.parse = function(response) {
      return _.map(response.results, function(result) {
        var model;
        model = new kbi.FetchedModel();
        return model.set(model.parse(result));
      });
    };

    return FetchedCollection;

  })(Backbone.Collection);

}).call(this);
