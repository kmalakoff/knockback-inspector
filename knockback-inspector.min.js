// Generated by CoffeeScript 1.3.3
/*
knockback-inspector.js 0.1.0
(c) 2012 Kevin Malakoff.
Knockback-Inspector.js is freely distributable under the MIT license.
See the following for full license details:
  https://github.com/kmalakoff/knockback-inspector/blob/master/LICENSE
Dependencies: Knockout.js, Underscore.js, Backbone.js, and Knockback.js.
*/(function(){var a={}.hasOwnProperty,b=function(b,c){function e(){this.constructor=b}for(var d in c)a.call(c,d)&&(b[d]=c[d]);return e.prototype=c.prototype,b.prototype=new e,b.__super__=c.prototype,b};this.kbi||(this.kbi={}),this.kbi.VERSION="0.1.0",kbi.StringTemplateSource=function(){function a(a){this.template_string=a}return a.prototype.text=function(a){return this.template_string},a}(),kbi.StringTemplateEngine=function(a){function c(){this.allowTemplateRewriting=!1}return b(c,a),c.prototype.makeTemplateSource=function(a){switch(a){case"kbi_model_node":return new kbi.StringTemplateSource(kbi.ModelNodeView);case"kbi_collection_node":return new kbi.StringTemplateSource(kbi.CollectionNodeView);default:return ko.nativeTemplateEngine.prototype.makeTemplateSource.apply(this,arguments)}},c}(ko.nativeTemplateEngine),kbi.FetchedModel=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.parse=function(a){var b,c,d,e,f;b={};for(d in a)f=a[d],_.isObject(f)?(e=new kbi.FetchedModel,b[d]=e.set(e.parse(f))):_.isArray(f)?(c=new kbi.FetchedCollection,b[d]=c.reset(c.parse(f))):b[d]=f;return b},c}(Backbone.Model),kbi.FetchedCollection=function(a){function c(){return c.__super__.constructor.apply(this,arguments)}return b(c,a),c.prototype.model=kbi.FetchedModel,c.prototype.parse=function(a){return _.map(a.results,function(a){var b;return b=new kbi.FetchedModel,b.set(b.parse(a))})},c}(Backbone.Collection),kbi.NodeViewModel=function(){function a(a,b,c){var d;this.name=a,this.opened=ko.observable(b),this.node=ko.utils.unwrapObservable(c),this.node instanceof kb.ViewModel&&(d=kb.utils.wrappedModel(this.node),this.attribute_names=ko.observableArray(d?_.keys(d.attributes):[])),this}return a.prototype.attributeType=function(a){var b;return b=this.node[a],ko.utils.unwrapObservable(b)instanceof kb.ViewModel?"model":kb.utils.observableInstanceOf(b,kb.CollectionAttributeConnector)?"collection":"simple"},a}(),kbi.nodeViewModel=kbi.nvm=function(a,b,c){return new kbi.NodeViewModel(a,b,c)},kbi.CollectionNodeView="<li class='kbi' data-bind=\"css: {opened: opened, closed: !opened()}\">\n  <div class='collection' data-bind=\"click: function(){ opened(!opened()) }\">\n    <span data-bind=\"text: (opened() ? '- ' : '+ ' )\"></span>\n    <span data-bind=\"text: name\"></span>\n  </div>\n\n  <!-- ko if: opened -->\n    <!-- ko foreach: node -->\n      <ul class='kbi' data-bind=\"template: {name: 'kbi_model_node', data: kbi.nvm('['+$index()+']', false, $data)}\"></ul>\n    <!-- /ko -->\n  <!-- /ko -->\n</li>",kbi.ModelNodeView="<li class='kbi' data-bind=\"css: {opened: opened, closed: !opened()}\">\n  <div class='kbi model' data-bind=\"click: function(){ opened(!opened()); }\">\n    <span data-bind=\"text: (opened() ? '- ' : '+ ' )\"></span>\n    <span data-bind=\"text: name\"></span>\n  </div>\n\n  <!-- ko if: opened -->\n    <!-- ko foreach: attribute_names -->\n\n      <!-- ko if: ($parent.attributeType($data) == 'simple') -->\n        <fieldset class='kbi'>\n          <label data-bind=\"text: $data\"> </label>\n          <input type='text' data-bind=\"value: $parent.node[$data]\">\n        </fieldset>\n      <!-- /ko -->\n\n      <!-- ko if: ($parent.attributeType($data) == 'model') -->\n        <ul class='kbi' data-bind=\"template: {name: 'kbi_model_node', data: kbi.nvm($data, false, $parent.node[$data])}\"></ul>\n      <!-- /ko -->\n\n      <!-- ko if: ($parent.attributeType($data) == 'collection') -->\n        <ul class='kbi' data-bind=\"template: {name: 'kbi_collection_node', data: kbi.nvm($data+'[]', true, $parent.node[$data])}\"></ul>\n      <!-- /ko -->\n\n    <!-- /ko -->\n  <!-- /ko -->\n</li>"}).call(this);