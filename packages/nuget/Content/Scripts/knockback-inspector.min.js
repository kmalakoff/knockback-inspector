// Generated by CoffeeScript 1.3.3

/*
knockback-inspector.js 0.1.2
(c) 2012 Kevin Malakoff.
Knockback-Inspector.js is freely distributable under the MIT license.
See the following for full license details:
  https://github.com/kmalakoff/knockback-inspector/blob/master/LICENSE
Dependencies: Knockout.js, Underscore.js, Backbone.js, and Knockback.js.
*/(function(){var Backbone,kb,kbi,ko,_,__hasProp={}.hasOwnProperty,__extends=function(child,parent){function ctor(){this.constructor=child}for(var key in parent)__hasProp.call(parent,key)&&(child[key]=parent[key]);return ctor.prototype=parent.prototype,child.prototype=new ctor,child.__super__=parent.prototype,child};_=!window._&&typeof require!="undefined"?require("underscore"):window._,_&&!_.VERSION&&(_=_._),Backbone=!window.Backbone&&typeof require!="undefined"?require("backbone"):window.Backbone,ko=!window.ko&&typeof require!="undefined"?require("knockout"):window.ko,kb=!window.kb&&typeof require!="undefined"?require("knockback"):window.kb,kbi=this.kbi=typeof exports!="undefined"?exports:{},this.kbi.VERSION="0.1.2",kbi.TemplateSource=function(){function TemplateSource(template_generator,binding_context){this.template_generator=template_generator,this.binding_context=binding_context!=null?binding_context:{}}return TemplateSource.prototype.data=function(key,value){return arguments.length===1?this.binding_context[key]:this.binding_context[key]=value},TemplateSource.prototype.text=function(){if(arguments.length>0)throw"kbi.TemplateSource: unexpected writing to template source";return this.template_generator.viewText(this.binding_context)},TemplateSource}(),kbi.TemplateEngine=function(_super){function TemplateEngine(){this.allowTemplateRewriting=!1,this.generators={kbi_model_node:kbi.ModelNodeViewGenerator,kbi_collection_node:kbi.CollectionNodeViewGenerator}}return __extends(TemplateEngine,_super),TemplateEngine.prototype.generator=function(template_name,generator_class){return arguments.length===1?this.generators[template_name]:this.generators[template_name]=generator_class},TemplateEngine.prototype.makeTemplateSource=function(template_name){return this.generators.hasOwnProperty(template_name)?new kbi.TemplateSource(new this.generators[template_name](template_name)):TemplateEngine.__super__.makeTemplateSource.apply(this,arguments)},TemplateEngine.prototype.renderTemplateSource=function(template_source,binding_context,options){var key,value;for(key in binding_context)value=binding_context[key],template_source.data(key,value);return TemplateEngine.__super__.renderTemplateSource.apply(this,arguments)},TemplateEngine}(ko.nativeTemplateEngine),kbi.FetchedModel=function(_super){function FetchedModel(){return FetchedModel.__super__.constructor.apply(this,arguments)}return __extends(FetchedModel,_super),FetchedModel.prototype.parse=function(response){var attributes,collection,key,model,value;attributes={};for(key in response)value=response[key],_.isObject(value)?(model=new kbi.FetchedModel,attributes[key]=model.set(model.parse(value))):_.isArray(value)?(collection=new kbi.FetchedCollection,attributes[key]=collection.reset(collection.parse(value))):attributes[key]=value;return attributes},FetchedModel}(Backbone.Model),kbi.FetchedCollection=function(_super){function FetchedCollection(){return FetchedCollection.__super__.constructor.apply(this,arguments)}return __extends(FetchedCollection,_super),FetchedCollection.prototype.model=kbi.FetchedModel,FetchedCollection.prototype.parse=function(response){var models;return models=response.results?response.results:response,_.map(response.results,function(result){var model;return model=new kbi.FetchedModel,model.set(model.parse(result))})},FetchedCollection}(Backbone.Collection),kbi.NodeViewModel=function(){function NodeViewModel(name,opened,node){var model;this.name=name,this.opened=ko.observable(opened),this.node=ko.utils.unwrapObservable(node),this.node instanceof kb.ViewModel&&(model=kb.utils.wrappedModel(this.node),this.attribute_names=ko.observableArray(model?_.keys(model.attributes):[])),this}return NodeViewModel.prototype.attributeType=function(key){var attribute_connector;return attribute_connector=this.node[key],ko.utils.unwrapObservable(attribute_connector)instanceof kb.ViewModel?"model":kb.utils.observableInstanceOf(attribute_connector,kb.CollectionAttributeConnector)?"collection":"simple"},NodeViewModel}(),kbi.nodeViewModel=kbi.nvm=function(name,opened,node){return new kbi.NodeViewModel(name,opened,node)},kbi.CollectionNodeViewGenerator=function(){function CollectionNodeViewGenerator(template_name){this.template_name=template_name}return CollectionNodeViewGenerator.prototype.viewText=function(binding_context){return""+this.nodeStart(binding_context)+"\n"+this.nodeManipulator(binding_context)+"\n  <!-- ko if: opened -->\n    <!-- ko foreach: node -->\n      "+this.modelNode(binding_context)+"\n    <!-- /ko -->\n  <!-- /ko -->\n"+this.nodeEnd(binding_context)},CollectionNodeViewGenerator.prototype.nodeStart=function(binding_context){return"<li class='kbi' data-bind=\"css: {opened: opened, closed: !opened()}\">"},CollectionNodeViewGenerator.prototype.nodeManipulator=function(binding_context){return"<div class='collection' data-bind=\"click: function(){ opened(!opened()) }\">\n  <span data-bind=\"text: (opened() ? '- ' : '+ ' )\"></span>\n  <span data-bind=\"text: name\"></span>\n</div>"},CollectionNodeViewGenerator.prototype.modelNode=function(binding_context){return""+kbi.ViewHTML.modelTree("'['+$index()+']'",!1,"$data")},CollectionNodeViewGenerator.prototype.nodeEnd=function(binding_context){return"</li>"},CollectionNodeViewGenerator}(),kbi.ModelNodeViewGenerator=function(){function ModelNodeViewGenerator(template_name){this.template_name=template_name}return ModelNodeViewGenerator.prototype.viewText=function(binding_context){return""+this.nodeStart(binding_context)+"\n"+this.nodeManipulator(binding_context)+"\n  <!-- ko if: opened -->\n    <!-- ko foreach: attribute_names -->\n      <!-- ko if: ($parent.attributeType($data) == 'simple') -->\n        "+this.attributeEditor(binding_context)+"\n      <!-- /ko -->\n\n      <!-- ko if: ($parent.attributeType($data) == 'model') -->\n        "+this.modelTree(binding_context)+"\n      <!-- /ko -->\n\n      <!-- ko if: ($parent.attributeType($data) == 'collection') -->\n        "+this.modelTree(binding_context)+"\n      <!-- /ko -->\n\n    <!-- /ko -->\n  <!-- /ko -->\n"+this.nodeEnd(binding_context)},ModelNodeViewGenerator.prototype.nodeStart=function(binding_context){return"<li class='kbi' data-bind=\"css: {opened: opened, closed: !opened()}\">"},ModelNodeViewGenerator.prototype.nodeManipulator=function(binding_context){return"<div class='collection' data-bind=\"click: function(){ opened(!opened()) }\">\n  <span data-bind=\"text: (opened() ? '- ' : '+ ' )\"></span>\n  <span data-bind=\"text: name\"></span>\n</div>"},ModelNodeViewGenerator.prototype.attributeEditor=function(binding_context){return"<fieldset class='kbi'>\n  <label data-bind=\"text: $data\"></label>\n  <input type='text' data-bind=\"value: $parent.node[$data]\">\n</fieldset>"},ModelNodeViewGenerator.prototype.modelTree=function(binding_context){return""+kbi.ViewHTML.modelTree("$data",!1,"$parent.node[$data]")},ModelNodeViewGenerator.prototype.collectionTree=function(binding_context){return""+kbi.ViewHTML.collectionTree("$data+'[]'",!0,"$parent.node[$data]")},ModelNodeViewGenerator.prototype.nodeEnd=function(binding_context){return"</li>"},ModelNodeViewGenerator}(),kbi.ViewHTML=function(){function ViewHTML(){}return ViewHTML.modelTree=function(name,opened,node){return"<ul class='kbi' data-bind=\"template: {name: 'kbi_model_node', data: kbi.nvm("+name+", "+opened+", "+node+')}"></ul>'},ViewHTML.collectionTree=function(data){return"<ul class='kbi' data-bind=\"template: {name: 'kbi_collection_node', data: kbi.nvm("+name+", "+opened+", "+node+')}"></ul>'},ViewHTML}()}).call(this);